package com.fyp.hotel.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

import java.time.Instant;
import java.time.LocalDate;

@Getter
@Setter
@RequiredArgsConstructor // generate constructor with all final fields as arguments
@Entity
@Table(name = "booking")
public class Booking {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO) //auto means auto increment by 1 it will be in sequence and it will be unique
//    @GeneratedValue(Strategy = GenerationType.IDENTITY) //identity means that the id will be generated by the database and it will not be in sequence and it will be unique
//    @GeneratedValue(Strategy = GenerationType.SEQUENCE) //sequence means that id will be generated by the database but it will be in sequence and it will be unique
    @Column(name = "booking_id")
    private Long bookingId;

    //for check in date and check out date column
    @Column(name = "check_in_date", nullable = false, length = 50)
    private LocalDate checkInDate;

    @Column(name = "check_out_date", nullable = false, length = 50)
    private LocalDate checkOutDate;

    @Column(name = "booking_date", nullable = false, length = 50)
    private LocalDate bookingDate;

    @Column(name = "days_of_stay", nullable = false, length = 50)
    private Long daysOfStay;

    @Column(name = "total_amount", nullable = false, length = 50)
    private Long totalAmount;

    @Column(name = "created_at", nullable = false, length = 50)
    private Instant createdAt;

    @Column(name = "updated_at", length = 50)
    private Instant updatedAt;

    //one user has many bookings
    @ManyToOne(fetch = FetchType.LAZY, optional = false, cascade = CascadeType.ALL) //optional = false means that user is required to make a booking and it cannot be null
    @JoinColumn(
            name = "user_id",
            nullable = false,
            referencedColumnName = "user_id"
    )
    private User user;

    //one room can be booked one time at a time
    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(
            name = "room_id",
            nullable = false,
            referencedColumnName = "room_id"
    )
    private HotelRoom hotelRoom;

    @JsonBackReference
    @OneToOne(mappedBy = "booking", cascade = CascadeType.ALL)
    private Payment payment;

    @OneToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(
            name = "payment_method_id",
            nullable = false,
            referencedColumnName = "payment_method_id"
    )
    private PaymentMethod paymentMethod;
}
